     1                                  ; new count bit routine
     2                                  ;	part of this code is origined from
     3                                  ;	new GOGO-no-coda (1999, 2000)
     4                                  ;	Copyright (C) 1999 shigeo
     5                                  ;	modified by Keiichi SAKAI
     6                                  
     7                                  %include "nasm.h"
     1                              <1> 
     2                              <1> ;	Copyright (C) 1999 URURI
     3                              <1> 
     4                              <1> ;	nasm�ѥޥ���
     5                              <1> ;	1999/08/21 ���
     6                              <1> ;	1999/10/10 ���Ĥ��ɲ�
     7                              <1> ;	1999/10/27 aout�б�
     8                              <1> ;	1999/11/07 pushf, popf ��NASM�ΥХ��б�
     9                              <1> ;	1999/12/02 for BCC ( Thanks to Miquel )
    10                              <1> 
    11                              <1> ; for Windows Visual C++        -> define WIN32
    12                              <1> ;             Borland or cygwin ->        WIN32 and COFF
    13                              <1> ; for FreeBSD 2.x               ->        AOUT
    14                              <1> ; for TownsOS                   ->        __tos__
    15                              <1> ; otherwise                     ->   none
    16                              <1> 
    17                              <1> ;̾����դ���
    18                              <1> 
    19                              <1> BITS 32
    20                              <1> 
    21                              <1> section .note.GNU-stack noalloc noexec nowrite progbits
    22                              <1> 
    23                              <1> %ifdef YASM
    24                              <1> 	%define segment_code segment .text align=16 use32
    25                              <1> 	%define segment_data segment .data align=16 use32
    26                              <1> 	%define segment_bss  segment .bss align=16 use32
    27                              <1> %elifdef WIN32
    28                              <1> 	%define segment_code segment .text align=16 class=CODE use32
    29                              <1> 	%define segment_data segment .data align=16 class=DATA use32
    30                              <1> %ifdef __BORLANDC__
    31                              <1> 	%define segment_bss  segment .data align=16 class=DATA use32
    32                              <1> %else
    33                              <1> 	%define segment_bss  segment .bss align=16 class=DATA use32
    34                              <1> %endif
    35                              <1> %elifdef AOUT
    36                              <1> 	%define _NAMING
    37                              <1> 	%define segment_code segment .text
    38                              <1> 	%define segment_data segment .data
    39                              <1> 	%define segment_bss  segment .bss
    40                              <1> %else
    41                              <1> %ifidn __OUTPUT_FORMAT__,elf
    42                              <1> 	section .note.GNU-stack progbits noalloc noexec nowrite align=1
    43                              <1> %endif
    44                              <1> 	%define segment_code segment .text align=16 class=CODE use32
    45                              <1> 	%define segment_data segment .data align=16 class=DATA use32
    46                              <1> 	%define segment_bss  segment .bss align=16 class=DATA use32
    47                              <1> %endif
    48                              <1> 
    49                              <1> %ifdef WIN32
    50                              <1> 	%define _NAMING
    51                              <1> %endif
    52                              <1> 
    53                              <1> %ifdef __tos__
    54                              <1> group CGROUP text
    55                              <1> group DGROUP data
    56                              <1> %endif
    57                              <1> 
    58                              <1> ;ñ�����ư��������
    59                              <1> 
    60                              <1> %idefine float dword
    61                              <1> %idefine fsize 4
    62                              <1> %idefine fsizen(a) (fsize*(a))
    63                              <1> 
    64                              <1> ;��ɷ��
    65                              <1> 
    66                              <1> %idefine wsize 2
    67                              <1> %idefine wsizen(a) (wsize*(a))
    68                              <1> %idefine dwsize 4
    69                              <1> %idefine dwsizen(a) (dwsize*(a))
    70                              <1> 
    71                              <1> ;REG
    72                              <1> 
    73                              <1> %define r0 eax
    74                              <1> %define r1 ebx
    75                              <1> %define r2 ecx
    76                              <1> %define r3 edx
    77                              <1> %define r4 esi
    78                              <1> %define r5 edi
    79                              <1> %define r6 ebp
    80                              <1> %define r7 esp
    81                              <1> 
    82                              <1> ;MMX,3DNow!,SSE
    83                              <1> 
    84                              <1> %define pmov	movq
    85                              <1> %define pmovd	movd
    86                              <1> 
    87                              <1> %define pupldq	punpckldq
    88                              <1> %define puphdq	punpckhdq
    89                              <1> %define puplwd	punpcklwd
    90                              <1> %define puphwd	punpckhwd
    91                              <1> 
    92                              <1> %define xm0 xmm0
    93                              <1> %define xm1 xmm1
    94                              <1> %define xm2 xmm2
    95                              <1> %define xm3 xmm3
    96                              <1> %define xm4 xmm4
    97                              <1> %define xm5 xmm5
    98                              <1> %define xm6 xmm6
    99                              <1> %define xm7 xmm7
   100                              <1> 
   101                              <1> ;�����åե��Ѥ�4�ʥޥ���
   102                              <1> 
   103                              <1> %define R4(a,b,c,d) (a*64+b*16+c*4+d)
   104                              <1> 
   105                              <1> ;C�饤���ʴʰץޥ���
   106                              <1> 
   107                              <1> %imacro globaldef 1
   108                              <1> 	%ifdef _NAMING
   109                              <1> 		%define %1 _%1
   110                              <1> 	%endif
   111                              <1> 	global %1
   112                              <1> %endmacro
   113                              <1> 
   114                              <1> %imacro externdef 1
   115                              <1> 	%ifdef _NAMING
   116                              <1> 		%define %1 _%1
   117                              <1> 	%endif
   118                              <1> 	extern %1
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> %imacro proc 1
   122                              <1> 	%push	proc
   123                              <1> 	%ifdef _NAMING
   124                              <1> 		global _%1
   125                              <1> 	%else
   126                              <1> 		global %1
   127                              <1> 	%endif
   128                              <1> 
   129                              <1> 	align 32
   130                              <1> %1:
   131                              <1> _%1:
   132                              <1> 
   133                              <1> 	%assign %$STACK 0
   134                              <1> 	%assign %$STACKN 0
   135                              <1> 	%assign %$ARG 4
   136                              <1> %endmacro
   137                              <1> 
   138                              <1> %imacro endproc 0
   139                              <1> 	%ifnctx proc
   140                              <1> 		%error expected 'proc' before 'endproc'.
   141                              <1> 	%else
   142                              <1> 		%if %$STACK > 0
   143                              <1> 			add esp, %$STACK
   144                              <1> 		%endif
   145                              <1> 
   146                              <1> 		%if %$STACK <> (-%$STACKN)
   147                              <1> 			%error STACKLEVEL mismatch check 'local', 'alloc', 'pushd', 'popd'
   148                              <1> 		%endif
   149                              <1> 
   150                              <1> 		ret
   151                              <1> 		%pop
   152                              <1> 	%endif
   153                              <1> %endmacro
   154                              <1> 
   155                              <1> %idefine sp(a) esp+%$STACK+a
   156                              <1> 
   157                              <1> %imacro arg 1
   158                              <1> 	%00	equ %$ARG
   159                              <1> 	%assign %$ARG %$ARG+%1
   160                              <1> %endmacro
   161                              <1> 
   162                              <1> %imacro local 1
   163                              <1> 	%assign %$STACKN %$STACKN-%1
   164                              <1> 	%00 equ %$STACKN
   165                              <1> %endmacro
   166                              <1> 
   167                              <1> %imacro alloc 0
   168                              <1> 	sub esp, (-%$STACKN)-%$STACK
   169                              <1> 	%assign %$STACK (-%$STACKN)
   170                              <1> %endmacro
   171                              <1> 
   172                              <1> %imacro pushd 1-*
   173                              <1> 	%rep %0
   174                              <1> 		push %1
   175                              <1> 		%assign %$STACK %$STACK+4
   176                              <1> 	%rotate 1
   177                              <1> 	%endrep
   178                              <1> %endmacro
   179                              <1> 
   180                              <1> %imacro popd 1-*
   181                              <1> 	%rep %0
   182                              <1> 	%rotate -1
   183                              <1> 		pop %1
   184                              <1> 		%assign %$STACK %$STACK-4
   185                              <1> 	%endrep
   186                              <1> %endmacro
   187                              <1> 
   188                              <1> ; bug of NASM-0.98
   189                              <1> %define pushf db 0x66, 0x9C
   190                              <1> %define popf  db 0x66, 0x9D
   191                              <1> 
   192                              <1> %define	ge16(n)		((((n) / 16)*0xFFFFFFFF) & 0xFFFFFFFF)
   193                              <1> %define	ge15(n)		((((n) / 15)*0xFFFFFFFF) & 0xFFFFFFFF)
   194                              <1> %define	ge14(n)		((((n) / 14)*0xFFFFFFFF) & 0xFFFFFFFF)
   195                              <1> %define	ge13(n)		((((n) / 13)*0xFFFFFFFF) & 0xFFFFFFFF)
   196                              <1> %define	ge12(n)		((((n) / 12)*0xFFFFFFFF) & 0xFFFFFFFF)
   197                              <1> %define	ge11(n)		((((n) / 11)*0xFFFFFFFF) & 0xFFFFFFFF)
   198                              <1> %define	ge10(n)		((((n) / 10)*0xFFFFFFFF) & 0xFFFFFFFF)
   199                              <1> %define	ge9(n)		((((n) /  9)*0xFFFFFFFF) & 0xFFFFFFFF)
   200                              <1> %define	ge8(n)		(ge9(n) | ((((n) /  8)*0xFFFFFFFF) & 0xFFFFFFFF))
   201                              <1> %define	ge7(n)		(ge9(n) | ((((n) /  7)*0xFFFFFFFF) & 0xFFFFFFFF))
   202                              <1> %define	ge6(n)		(ge9(n) | ((((n) /  6)*0xFFFFFFFF) & 0xFFFFFFFF))
   203                              <1> %define	ge5(n)		(ge9(n) | ((((n) /  5)*0xFFFFFFFF) & 0xFFFFFFFF))
   204                              <1> %define	ge4(n)		(ge5(n) | ((((n) /  4)*0xFFFFFFFF) & 0xFFFFFFFF))
   205                              <1> %define	ge3(n)		(ge5(n) | ((((n) /  3)*0xFFFFFFFF) & 0xFFFFFFFF))
   206                              <1> %define	ge2(n)		(ge3(n) | ((((n) /  2)*0xFFFFFFFF) & 0xFFFFFFFF))
   207                              <1> %define	ge1(n)		(ge2(n) | ((((n) /  1)*0xFFFFFFFF) & 0xFFFFFFFF))
   208                              <1> 
   209                              <1> ; macro to align for begining of loop
   210                              <1> ; %1   does not align if it LE bytes to next alignment 
   211                              <1> ;      4..16 
   212                              <1> ;      default is 12
   213                              <1> 
   214                              <1> %imacro	loopalignK6	0-1 12 
   215                              <1> %%here:
   216                              <1> 	times (($$-%%here) & 15 & ge1(($$-%%here) & 15) & ~ge4(($$-%%here) & 15)) nop
   217                              <1> 	times (1                & ge4(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) jmp short %%skip
   218                              <1> 	times (((($$-%%here) & 15)-2) & ge4(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) nop
   219                              <1> %%skip:
   220                              <1> %endmacro
   221                              <1> 
   222                              <1> %imacro	loopalignK7	0-1 12 
   223                              <1> %%here:
   224                              <1> 	times (1 & ge1(($$-%%here) & 15)  & ~ge2(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) nop
   225                              <1> 	times (1 & ge2(($$-%%here) & 15)  & ~ge3(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Bh,0C0h
   226                              <1> 	times (1 & ge3(($$-%%here) & 15)  & ~ge4(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,020h
   227                              <1> 	times (1 & ge4(($$-%%here) & 15)  & ~ge5(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h
   228                              <1> 	times (1 & ge5(($$-%%here) & 15)  & ~ge6(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h,090h
   229                              <1> 	times (1 & ge6(($$-%%here) & 15)  & ~ge7(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,080h,0,0,0,0
   230                              <1> 	times (1 & ge7(($$-%%here) & 15)  & ~ge8(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0
   231                              <1> 	times (1 & ge8(($$-%%here) & 15)  & ~ge9(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0,90h
   232                              <1> 	times (1 & ge9(($$-%%here) & 15)  & ~ge10(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,007h,90h,90h,90h,90h,90h,90h,90h
   233                              <1> 	times (1 & ge10(($$-%%here) & 15) & ~ge11(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,008h,90h,90h,90h,90h,90h,90h,90h,90h
   234                              <1> 	times (1 & ge11(($$-%%here) & 15) & ~ge12(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,009h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   235                              <1> 	times (1 & ge12(($$-%%here) & 15) & ~ge13(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ah,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   236                              <1> 	times (1 & ge13(($$-%%here) & 15) & ~ge14(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Bh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   237                              <1> 	times (1 & ge14(($$-%%here) & 15) & ~ge15(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ch,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   238                              <1> 	times (1 & ge15(($$-%%here) & 15) & ~ge16(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Dh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   239                              <1> %%skip:
   240                              <1> %endmacro
   241                              <1> 
   242                              <1> %imacro	loopalign	0-1 12 
   243                              <1> 	loopalignK7 %1
   244                              <1> %endmacro
   245                              <1> %define PACK(x,y,z,w)	(x*64+y*16+z*4+w)
   246                              <1> 
   247                              <1> %ifidn __OUTPUT_FORMAT__,elf
   248                              <1> 
   249                              <1> %idefine PIC_BASE(A) _GLOBAL_OFFSET_TABLE_ + $$ - $ wrt ..gotpc
   250                              <1> %idefine PIC_EBP_REL(A) ebp + A wrt ..gotoff
   251                              <1> %macro PIC_OFFSETTABLE 0
   252                              <1> extern  _GLOBAL_OFFSET_TABLE_
   253                              <1> get_pc.bp:
   254                              <1> 	mov ebp, [esp]
   255                              <1> 	retn
   256                              <1> %endmacro
   257                              <1> 
   258                              <1> %else
   259                              <1> 
   260                              <1> %define PIC_BASE(A) (0)
   261                              <1> %define PIC_EBP_REL(A) (A)
   262                              <1> %macro PIC_OFFSETTABLE 0
   263                              <1> get_pc.bp:
   264                              <1> 	mov ebp, [esp]
   265                              <1> 	retn
   266                              <1> %endmacro
   267                              <1> 
   268                              <1> %endif
     8                                  
     9                                  	globaldef	choose_table_MMX
     9                              <1>  %ifdef _NAMING
     9                              <1>  %define %1 _%1
     9                              <1>  %endif
     9                              <1>  global %1
    10                                  	globaldef	MMX_masking
    10                              <1>  %ifdef _NAMING
    10                              <1>  %define %1 _%1
    10                              <1>  %endif
    10                              <1>  global %1
    11                                  
    12                                  	externdef	largetbl
    12                              <1>  %ifdef _NAMING
    12                              <1>  %define %1 _%1
    12                              <1>  %endif
    12                              <1>  extern %1
    13                                  	externdef	t1l
    13                              <1>  %ifdef _NAMING
    13                              <1>  %define %1 _%1
    13                              <1>  %endif
    13                              <1>  extern %1
    14                                  	externdef	table23
    14                              <1>  %ifdef _NAMING
    14                              <1>  %define %1 _%1
    14                              <1>  %endif
    14                              <1>  extern %1
    15                                  	externdef	table56
    15                              <1>  %ifdef _NAMING
    15                              <1>  %define %1 _%1
    15                              <1>  %endif
    15                              <1>  extern %1
    16                                  
    17                                  	segment_data
    18                                  	align	16
    19 00000000 0E000E000E000E00        D14_14_14_14	dd	0x000E000E, 0x000E000E
    20 00000008 F0FFF0FFF0FFF0FF        D15_15_15_15	dd	0xfff0fff0, 0xfff0fff0
    21 00000010 1000010010000100        mul_add		dd	0x00010010, 0x00010010
    22 00000018 0300010003000100        mul_add23	dd	0x00010003, 0x00010003
    23 00000020 0400010004000100        mul_add56	dd	0x00010004, 0x00010004
    24                                  tableDEF
    24          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    25 00000028 030001000100000005-     	dd	0x00010003,0x01,0x00050005,0x05,0x00070006,0x07,0x00090008,0x08,0x000a0008, 0x09
    25 00000031 000500050000000600-
    25 0000003A 070007000000080009-
    25 00000043 000800000008000A00-
    25 0000004C 09000000           
    26 00000050 09000A000A0000000A-     	dd	0x000a0009,0x0a,0x000b000a,0x0a,0x000b000a,0x0b,0x000c000a,0x0a,0x000c000b, 0x0b
    26 00000059 000B000A0000000A00-
    26 00000062 0B000B0000000A000C-
    26 0000006B 000A0000000B000C00-
    26 00000074 0B000000           
    27 00000078 0B000C000C0000000C-     	dd	0x000c000b,0x0c,0x000d000c,0x0c,0x000d000c,0x0d,0x000d000c,0x0d,0x000e000d, 0x0e
    27 00000081 000D000C0000000C00-
    27 0000008A 0D000D0000000C000D-
    27 00000093 000D0000000D000E00-
    27 0000009C 0E000000           
    28 000000A0 0E000B000E00000005-     	dd	0x000b000e,0x0e,0x00040005,0x04,0x00060005,0x06,0x00080007,0x08,0x00090008, 0x09
    28 000000A9 000400040000000500-
    28 000000B2 060006000000070008-
    28 000000BB 000800000008000900-
    28 000000C4 09000000           
    29 000000C8 09000A000A00000009-     	dd	0x000a0009,0x0a,0x000b0009,0x0a,0x000b000a,0x0b,0x000b000a,0x0b,0x000c000a, 0x0b
    29 000000D1 000B000A0000000A00-
    29 000000DA 0B000B0000000A000B-
    29 000000E3 000B0000000A000C00-
    29 000000EC 0B000000           
    30 000000F0 0B000C000B0000000B-     	dd	0x000c000b,0x0b,0x000c000b,0x0c,0x000d000c,0x0c,0x000e000c,0x0d,0x000d000c, 0x0e
    30 000000F9 000C000C0000000C00-
    30 00000102 0D000C0000000C000E-
    30 0000010B 000D0000000C000D00-
    30 00000114 0E000000           
    31 00000118 0D000E000E0000000D-     	dd	0x000e000d,0x0e,0x000b000d,0x0e,0x00070006,0x07,0x00080007,0x08,0x00090007, 0x09
    31 00000121 000B000E0000000600-
    31 0000012A 070007000000070008-
    31 00000133 000800000007000900-
    31 0000013C 09000000           
    32 00000140 08000A000A00000009-     	dd	0x000a0008,0x0a,0x000b0009,0x0b,0x000b0009,0x0b,0x000c000a,0x0c,0x000c000a, 0x0c
    32 00000149 000B000B0000000900-
    32 00000152 0B000B0000000A000C-
    32 0000015B 000C0000000A000C00-
    32 00000164 0C000000           
    33 00000168 0A000D000B0000000B-     	dd	0x000d000a,0x0b,0x000c000b,0x0c,0x000d000b,0x0c,0x000d000c,0x0d,0x000d000c, 0x0d
    33 00000171 000C000C0000000B00-
    33 0000017A 0D000C0000000C000D-
    33 00000183 000D0000000C000D00-
    33 0000018C 0D000000           
    34 00000190 0D000E000E0000000D-     	dd	0x000e000d,0x0e,0x000e000d,0x0f,0x000c000d,0x0f,0x00090007,0x08,0x00090008, 0x09
    34 00000199 000E000F0000000D00-
    34 000001A2 0C000F000000070009-
    34 000001AB 000800000008000900-
    34 000001B4 09000000           
    35 000001B8 08000A000A00000009-     	dd	0x000a0008,0x0a,0x000b0009,0x0b,0x000b0009,0x0b,0x000c000a,0x0c,0x000c000a, 0x0c
    35 000001C1 000B000B0000000900-
    35 000001CA 0B000B0000000A000C-
    35 000001D3 000C0000000A000C00-
    35 000001DC 0C000000           
    36 000001E0 0B000C000C0000000B-     	dd	0x000c000b,0x0c,0x000d000b,0x0c,0x000d000b,0x0d,0x000e000c,0x0d,0x000e000c, 0x0d
    36 000001E9 000D000C0000000B00-
    36 000001F2 0D000D0000000C000E-
    36 000001FB 000D0000000C000E00-
    36 00000204 0D000000           
    37 00000208 0C000E000D0000000D-     	dd	0x000e000c,0x0d,0x000f000d,0x0e,0x000f000d,0x0f,0x000d000d,0x0f,0x000a0008, 0x09
    37 00000211 000F000E0000000D00-
    37 0000021A 0F000F0000000D000D-
    37 00000223 000F00000008000A00-
    37 0000022C 09000000           
    38 00000230 08000A000900000009-     	dd	0x000a0008,0x09,0x000b0009,0x0b,0x000b0009,0x0b,0x000c000a,0x0c,0x000c000a, 0x0c
    38 00000239 000B000B0000000900-
    38 00000242 0B000B0000000A000C-
    38 0000024B 000C0000000A000C00-
    38 00000254 0C000000           
    39 00000258 0B000D000D0000000B-     	dd	0x000d000b,0x0d,0x000d000b,0x0d,0x000d000b,0x0c,0x000e000b,0x0d,0x000e000c, 0x0d
    39 00000261 000D000D0000000B00-
    39 0000026A 0D000C0000000B000E-
    39 00000273 000D0000000C000E00-
    39 0000027C 0D000000           
    40 00000280 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000f000c,0x0e,0x000f000d,0x0f,0x000f000d,0x0f,0x000c000d, 0x10
    40 00000289 000F000E0000000D00-
    40 00000292 0F000F0000000D000F-
    40 0000029B 000F0000000D000C00-
    40 000002A4 10000000           
    41 000002A8 09000A000A00000009-     	dd	0x000a0009,0x0a,0x000a0009,0x0a,0x000b0009,0x0b,0x000b000a,0x0c,0x000c000a, 0x0c
    41 000002B1 000A000A0000000900-
    41 000002BA 0B000B0000000A000B-
    41 000002C3 000C0000000A000C00-
    41 000002CC 0C000000           
    42 000002D0 0A000D000C0000000B-     	dd	0x000d000a,0x0c,0x000d000b,0x0d,0x000e000b,0x0d,0x000d000b,0x0d,0x000e000b, 0x0d
    42 000002D9 000D000D0000000B00-
    42 000002E2 0E000D0000000B000D-
    42 000002EB 000D0000000B000E00-
    42 000002F4 0D000000           
    43 000002F8 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000f000c,0x0d,0x000f000d,0x0f,0x000f000d,0x0f,0x0010000d, 0x10
    43 00000301 000F000D0000000D00-
    43 0000030A 0F000F0000000D000F-
    43 00000313 000F0000000D001000-
    43 0000031C 10000000           
    44 00000320 0E000D00100000000A-     	dd	0x000d000e,0x10,0x000b000a,0x0a,0x000b0009,0x0b,0x000b000a,0x0c,0x000c000a, 0x0c
    44 00000329 000B000A0000000900-
    44 00000332 0B000B0000000A000B-
    44 0000033B 000C0000000A000C00-
    44 00000344 0C000000           
    45 00000348 0A000D000D0000000B-     	dd	0x000d000a,0x0d,0x000d000b,0x0d,0x000d000b,0x0d,0x000d000b,0x0d,0x000e000b, 0x0d
    45 00000351 000D000D0000000B00-
    45 0000035A 0D000D0000000B000D-
    45 00000363 000D0000000B000E00-
    45 0000036C 0D000000           
    46 00000370 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0e,0x000e000c,0x0e,0x000f000d,0x0f,0x000f000d, 0x0f
    46 00000379 000E000E0000000C00-
    46 00000382 0E000E0000000D000F-
    46 0000038B 000F0000000D000F00-
    46 00000394 0F000000           
    47 00000398 0E001000100000000E-     	dd	0x0010000e,0x10,0x000d000e,0x10,0x000b000a,0x0b,0x000b000a,0x0b,0x000c000a, 0x0c
    47 000003A1 000D00100000000A00-
    47 000003AA 0B000B0000000A000B-
    47 000003B3 000B0000000A000C00-
    47 000003BC 0C000000           
    48 000003C0 0B000C000D0000000B-     	dd	0x000c000b,0x0d,0x000d000b,0x0d,0x000d000b,0x0d,0x000d000b,0x0e,0x000e000c, 0x0e
    48 000003C9 000D000D0000000B00-
    48 000003D2 0D000D0000000B000D-
    48 000003DB 000E0000000C000E00-
    48 000003E4 0E000000           
    49 000003E8 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000f000c,0x0e,0x000f000c,0x0f,0x000f000c,0x0f,0x000f000d, 0x0f
    49 000003F1 000F000E0000000C00-
    49 000003FA 0F000F0000000C000F-
    49 00000403 000F0000000D000F00-
    49 0000040C 0F000000           
    50 00000410 0D001100100000000D-     	dd	0x0011000d,0x10,0x0011000d,0x12,0x000d000e,0x12,0x000b000a,0x0a,0x000c000a, 0x0a
    50 00000419 001100120000000E00-
    50 00000422 0D00120000000A000B-
    50 0000042B 000A0000000A000C00-
    50 00000434 0A000000           
    51 00000438 0A000C000B0000000B-     	dd	0x000c000a,0x0b,0x000d000b,0x0c,0x000d000b,0x0c,0x000d000b,0x0d,0x000e000b, 0x0d
    51 00000441 000D000C0000000B00-
    51 0000044A 0D000C0000000B000D-
    51 00000453 000D0000000B000E00-
    51 0000045C 0D000000           
    52 00000460 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000f000c,0x0e,0x000f000c,0x0e,0x000f000c,0x0e,0x000f000d, 0x0f
    52 00000469 000F000E0000000C00-
    52 00000472 0F000E0000000C000F-
    52 0000047B 000E0000000D000F00-
    52 00000484 0F000000           
    53 00000488 0D0010000F0000000E-     	dd	0x0010000d,0x0f,0x0010000e,0x10,0x0010000e,0x11,0x000d000e,0x11,0x000c000a, 0x0b
    53 00000491 001000100000000E00-
    53 0000049A 1000110000000E000D-
    53 000004A3 00110000000A000C00-
    53 000004AC 0B000000           
    54 000004B0 0A000C000B0000000B-     	dd	0x000c000a,0x0b,0x000c000b,0x0c,0x000d000b,0x0c,0x000d000b,0x0d,0x000e000b, 0x0d
    54 000004B9 000C000C0000000B00-
    54 000004C2 0D000C0000000B000D-
    54 000004CB 000D0000000B000E00-
    54 000004D4 0D000000           
    55 000004D8 0C000E000D0000000C-     	dd	0x000e000c,0x0d,0x000f000c,0x0f,0x000f000c,0x0e,0x000f000d,0x0f,0x000f000d, 0x0f
    55 000004E1 000F000F0000000C00-
    55 000004EA 0F000E0000000D000F-
    55 000004F3 000F0000000D000F00-
    55 000004FC 0F000000           
    56 00000500 0D001000100000000D-     	dd	0x0010000d,0x10,0x000f000d,0x10,0x0010000e,0x10,0x000f000e,0x12,0x000e000e, 0x11
    56 00000509 000F00100000000E00-
    56 00000512 1000100000000E000F-
    56 0000051B 00120000000E000E00-
    56 00000524 11000000           
    57 00000528 0B000C000B0000000B-     	dd	0x000c000b,0x0b,0x000d000b,0x0c,0x000c000b,0x0c,0x000d000b,0x0d,0x000e000c, 0x0d
    57 00000531 000D000C0000000B00-
    57 0000053A 0C000C0000000B000D-
    57 00000543 000D0000000C000E00-
    57 0000054C 0D000000           
    58 00000550 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0e,0x000e000c,0x0f,0x000f000c,0x0e,0x0010000d, 0x0f
    58 00000559 000E000E0000000C00-
    58 00000562 0E000F0000000C000F-
    58 0000056B 000E0000000D001000-
    58 00000574 0F000000           
    59 00000578 0D001000100000000D-     	dd	0x0010000d,0x10,0x0010000d,0x0f,0x0011000d,0x10,0x0011000e,0x11,0x0010000f, 0x12
    59 00000581 0010000F0000000D00-
    59 0000058A 1100100000000E0011-
    59 00000593 00110000000F001000-
    59 0000059C 12000000           
    60 000005A0 0E000D00130000000B-     	dd	0x000d000e,0x13,0x000d000b,0x0c,0x000d000b,0x0c,0x000d000b,0x0c,0x000d000b, 0x0d
    60 000005A9 000D000C0000000B00-
    60 000005B2 0D000C0000000B000D-
    60 000005BB 000C0000000B000D00-
    60 000005C4 0D000000           
    61 000005C8 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0e,0x000f000c,0x0e,0x0010000c,0x0e,0x0010000d, 0x0f
    61 000005D1 000E000E0000000C00-
    61 000005DA 0F000E0000000C0010-
    61 000005E3 000E0000000D001000-
    61 000005EC 0F000000           
    62 000005F0 0D0010000F0000000D-     	dd	0x0010000d,0x0f,0x0010000d,0x0f,0x0010000d,0x10,0x0010000e,0x11,0x000f000e, 0x11
    62 000005F9 0010000F0000000D00-
    62 00000602 1000100000000E0010-
    62 0000060B 00110000000E000F00-
    62 00000614 11000000           
    63 00000618 0E001000110000000F-     	dd	0x0010000e,0x11,0x000e000f,0x12,0x000d000c,0x0c,0x000e000c,0x0d,0x000e000b, 0x0d
    63 00000621 000E00120000000C00-
    63 0000062A 0D000C0000000C000E-
    63 00000633 000D0000000B000E00-
    63 0000063C 0D000000           
    64 00000640 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0e,0x000f000c,0x0f,0x000f000d,0x0e,0x000f000d, 0x0f
    64 00000649 000E000E0000000C00-
    64 00000652 0F000F0000000D000F-
    64 0000065B 000E0000000D000F00-
    64 00000664 0F000000           
    65 00000668 0D000F00100000000D-     	dd	0x000f000d,0x10,0x0011000d,0x10,0x0010000d,0x11,0x0010000d,0x11,0x0010000e, 0x11
    65 00000671 001100100000000D00-
    65 0000067A 1000110000000D0010-
    65 00000683 00110000000E001000-
    65 0000068C 11000000           
    66 00000690 0E001000120000000F-     	dd	0x0010000e,0x12,0x0012000f,0x12,0x000e000f,0x12,0x000f000c,0x0d,0x000e000c, 0x0d
    66 00000699 001200120000000F00-
    66 000006A2 0E00120000000C000F-
    66 000006AB 000D0000000C000E00-
    66 000006B4 0D000000           
    67 000006B8 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0f,0x000f000c,0x0f,0x000f000d,0x0f,0x0010000d, 0x10
    67 000006C1 000E000F0000000C00-
    67 000006CA 0F000F0000000D000F-
    67 000006D3 000F0000000D001000-
    67 000006DC 10000000           
    68 000006E0 0D001000100000000D-     	dd	0x0010000d,0x10,0x0010000d,0x10,0x0012000e,0x10,0x0011000e,0x10,0x0011000e, 0x11
    68 000006E9 001000100000000E00-
    68 000006F2 1200100000000E0011-
    68 000006FB 00100000000E001100-
    68 00000704 11000000           
    69 00000708 0E001100120000000E-     	dd	0x0011000e,0x12,0x0013000e,0x11,0x0011000f,0x12,0x000e000f,0x12,0x000e000d, 0x0e
    69 00000711 001300110000000F00-
    69 0000071A 1100120000000F000E-
    69 00000723 00120000000D000E00-
    69 0000072C 0E000000           
    70 00000730 0D000F000E0000000D-     	dd	0x000f000d,0x0e,0x000d000d,0x0e,0x000e000d,0x0f,0x0010000d,0x0f,0x0010000d, 0x0f
    70 00000739 000D000E0000000D00-
    70 00000742 0E000F0000000D0010-
    70 0000074B 000F0000000D001000-
    70 00000754 0F000000           
    71 00000758 0D000F00110000000D-     	dd	0x000f000d,0x11,0x0010000d,0x10,0x0010000e,0x10,0x0011000e,0x13,0x0012000e, 0x11
    71 00000761 001000100000000E00-
    71 0000076A 1000100000000E0011-
    71 00000773 00130000000E001200-
    71 0000077C 11000000           
    72 00000780 0E001100110000000F-     	dd	0x0011000e,0x11,0x0013000f,0x11,0x0011000f,0x13,0x0010000e,0x12,0x000e000f, 0x12
    72 00000789 001300110000000F00-
    72 00000792 1100130000000E0010-
    72 0000079B 00120000000F000E00-
    72 000007A4 12000000           
    73 000007A8 0D000B000D0000000D-     	dd	0x000b000d,0x0d,0x000b000d,0x0e,0x000b000d,0x0f,0x000c000d,0x10,0x000c000d, 0x10
    73 000007B1 000B000E0000000D00-
    73 000007BA 0B000F0000000D000C-
    73 000007C3 00100000000D000C00-
    73 000007CC 10000000           
    74 000007D0 0D000D00100000000D-     	dd	0x000d000d,0x10,0x000d000d,0x11,0x000d000e,0x10,0x000e000e,0x11,0x000e000e, 0x11
    74 000007D9 000D00110000000E00-
    74 000007E2 0D00100000000E000E-
    74 000007EB 00110000000E000E00-
    74 000007F4 11000000           
    75 000007F8 0E000E00120000000E-     	dd	0x000e000e,0x12,0x000e000e,0x12,0x000e000f,0x15,0x000e000f,0x14,0x000e000f, 0x15
    75 00000801 000E00120000000F00-
    75 0000080A 0E00150000000F000E-
    75 00000813 00140000000F000E00-
    75 0000081C 15000000           
    76 00000820 0F000C0012000000        	dd	0x000c000f,0x12
    77                                  
    78                                  tableABC
    78          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    79 00000828 040002000100000004-     	dd	0x00020004,0x1,0x00040004,0x4,0x00060006,0x7,0x00080008,0x9,0x00090009,0xa,0x000a000a,0xa
    79 00000831 000400040000000600-
    79 0000083A 060007000000080008-
    79 00000843 000900000009000900-
    79 0000084C 0A0000000A000A000A-
    79 00000855 000000             
    80 00000858 0A0009000A0000000A-     	dd	0x0009000a,0xa,0x000a000a,0xb,0x00000000,0x0,0x00020003,0x1,0x00040004,0x4,0x00070006,0x7
    80 00000861 000A000B0000000000-
    80 0000086A 000000000000030002-
    80 00000873 000100000004000400-
    80 0000087C 040000000600070007-
    80 00000885 000000             
    81 00000888 070009000900000009-     	dd	0x00090007,0x9,0x00090009,0x9,0x000a000a,0xa,0x00000000,0x0,0x00040004,0x4,0x00050005,0x6
    81 00000891 000900090000000A00-
    81 0000089A 0A000A000000000000-
    81 000008A3 000000000004000400-
    81 000008AC 040000000500050006-
    81 000008B5 000000             
    82 000008B8 060006000800000007-     	dd	0x00060006,0x8,0x00080007,0x9,0x000a0009,0xa,0x000a0009,0xb,0x0009000a,0xa,0x000a000a,0xa
    82 000008C1 000800090000000900-
    82 000008CA 0A000A00000009000A-
    82 000008D3 000B0000000A000900-
    82 000008DC 0A0000000A000A000A-
    82 000008E5 000000             
    83 000008E8 000000000000000004-     	dd	0x00000000,0x0,0x00040004,0x4,0x00040005,0x6,0x00060006,0x8,0x000a0007,0x9,0x000a0008,0x9
    83 000008F1 000400040000000500-
    83 000008FA 040006000000060006-
    83 00000903 000800000007000A00-
    83 0000090C 0900000008000A0009-
    83 00000915 000000             
    84 00000918 0A000A000A00000000-     	dd	0x000a000a,0xa,0x00000000,0x0,0x00060006,0x7,0x00070006,0x8,0x00080007,0x9,0x00090008,0xa
    84 00000921 000000000000000600-
    84 0000092A 060007000000060007-
    84 00000933 000800000007000800-
    84 0000093C 09000000080009000A-
    84 00000945 000000             
    85 00000948 09000A000B0000000A-     	dd	0x000a0009,0xb,0x000b000a,0xc,0x000a0009,0xb,0x000a000a,0xb,0x00000000,0x0,0x00070005,0x7
    85 00000951 000B000C0000000900-
    85 0000095A 0A000B0000000A000A-
    85 00000963 000B00000000000000-
    85 0000096C 000000000500070007-
    85 00000975 000000             
    86 00000978 060006000700000007-     	dd	0x00060006,0x7,0x00080007,0x9,0x000a0008,0xa,0x000a0009,0xa,0x000b000a,0xb,0x00000000,0x0
    86 00000981 000800090000000800-
    86 0000098A 0A000A00000009000A-
    86 00000993 000A0000000A000B00-
    86 0000099C 0B0000000000000000-
    86 000009A5 000000             
    87 000009A8 070008000800000007-     	dd	0x00080007,0x8,0x00080007,0x9,0x00090008,0xa,0x000b0008,0xb,0x000a0009,0xc,0x000c000a,0xc
    87 000009B1 000800090000000800-
    87 000009BA 09000A00000008000B-
    87 000009C3 000B00000009000A00-
    87 000009CC 0C0000000A000C000C-
    87 000009D5 000000             
    88 000009D8 0A000A000B0000000A-     	dd	0x000a000a,0xb,0x000b000a,0xc,0x00000000,0x0,0x00090007,0x8,0x000a0007,0x9,0x000a0008,0xa
    88 000009E1 000B000C0000000000-
    88 000009EA 000000000000070009-
    88 000009F3 000800000007000A00-
    88 000009FC 0900000008000A000A-
    88 00000A05 000000             
    89 00000A08 09000B000B00000009-     	dd	0x000b0009,0xb,0x000b0009,0xb,0x000c000a,0xb,0x00000000,0x0,0x00090008,0x9,0x000a0008,0xa
    89 00000A11 000B000B0000000A00-
    89 00000A1A 0C000B000000000000-
    89 00000A23 000000000008000900-
    89 00000A2C 0900000008000A000A-
    89 00000A35 000000             
    90 00000A38 09000A000B00000009-     	dd	0x000a0009,0xb,0x000b0009,0xc,0x000b000a,0xc,0x000c000a,0xc,0x000b000a,0xc,0x000c000b,0xc
    90 00000A41 000B000C0000000A00-
    90 00000A4A 0B000C0000000A000C-
    90 00000A53 000C0000000A000B00-
    90 00000A5C 0C0000000B000C000C-
    90 00000A65 000000             
    91 00000A68 000000000000000008-     	dd	0x00000000,0x0,0x00090008,0x8,0x00090008,0x9,0x000a0009,0xa,0x000b0009,0xb,0x000c000a,0xb
    91 00000A71 000900080000000800-
    91 00000A7A 09000900000009000A-
    91 00000A83 000A00000009000B00-
    91 00000A8C 0B0000000A000C000B-
    91 00000A95 000000             
    92 00000A98 0B000C000C00000000-     	dd	0x000c000b,0xc,0x00000000,0x0,0x00090009,0xa,0x000a0009,0xb,0x000b000a,0xc,0x000c000a,0xc
    92 00000AA1 000000000000000900-
    92 00000AAA 09000A00000009000A-
    92 00000AB3 000B0000000A000B00-
    92 00000ABC 0C0000000A000C000C-
    92 00000AC5 000000             
    93 00000AC8 0A000C000D0000000B-     	dd	0x000c000a,0xd,0x000d000b,0xd,0x000c000a,0xc,0x000d000b,0xd,0x00000000,0x0,0x000a0009,0x9
    93 00000AD1 000D000D0000000A00-
    93 00000ADA 0C000C0000000B000D-
    93 00000AE3 000D00000000000000-
    93 00000AEC 0000000009000A0009-
    93 00000AF5 000000             
    94 00000AF8 09000A000A0000000A-     	dd	0x000a0009,0xa,0x000b000a,0xb,0x000b000a,0xc,0x000d000b,0xc,0x000d000b,0xc,0x00000000,0x0
    94 00000B01 000B000B0000000A00-
    94 00000B0A 0B000C0000000B000D-
    94 00000B13 000C0000000B000D00-
    94 00000B1C 0C0000000000000000-
    94 00000B25 000000             
    95 00000B28 090009000900000009-     	dd	0x00090009,0x9,0x00090009,0xa,0x00090009,0xb,0x000a000a,0xc,0x000b000a,0xc,0x000c000b,0xc
    95 00000B31 0009000A0000000900-
    95 00000B3A 09000B0000000A000A-
    95 00000B43 000C0000000A000B00-
    95 00000B4C 0C0000000B000C000C-
    95 00000B55 000000             
    96 00000B58 0B000C000D0000000C-     	dd	0x000c000b,0xd,0x000c000c,0xd,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0
    96 00000B61 000C000D0000000000-
    96 00000B6A 000000000000000000-
    96 00000B73 000000000000000000-
    96 00000B7C 000000000000000000-
    96 00000B85 000000             
    97 00000B88 000000000000000000-     	dd	0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x0009000a,0xa,0x0009000a,0xa
    97 00000B91 000000000000000000-
    97 00000B9A 000000000000000000-
    97 00000BA3 00000000000A000900-
    97 00000BAC 0A0000000A0009000A-
    97 00000BB5 000000             
    98 00000BB8 0A000A000B0000000B-     	dd	0x000a000a,0xb,0x000b000b,0xc,0x000c000b,0xc,0x000c000b,0xd,0x000c000b,0xd,0x000c000c,0xd
    98 00000BC1 000B000C0000000B00-
    98 00000BCA 0C000C0000000B000C-
    98 00000BD3 000D0000000B000C00-
    98 00000BDC 0D0000000C000C000D-
    98 00000BE5 000000             
    99 00000BE8 000000000000000000-     	dd	0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0
    99 00000BF1 000000000000000000-
    99 00000BFA 000000000000000000-
    99 00000C03 000000000000000000-
    99 00000C0C 000000000000000000-
    99 00000C15 000000             
   100 00000C18 000000000000000000-     	dd	0x0,0x00000000, 0x0,0x00000000
   100 00000C21 00000000000000     
   101                                  
   102                                  linbits32
   102          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   103 00000C28 040004000100010004-     	dd	0x00040004,0x10001,0x00040004,0x20002,0x00040004,0x30003,0x00040004,0x40004
   103 00000C31 000400020002000400-
   103 00000C3A 040003000300040004-
   103 00000C43 0004000400         
   104 00000C48 050005000600060006-     	dd	0x00050005,0x60006,0x00060006,0x60006,0x00070007,0x80008,0x00080008,0x80008
   104 00000C51 000600060006000700-
   104 00000C5A 070008000800080008-
   104 00000C63 0008000800         
   105 00000C68 090009000A000A000B-     	dd	0x00090009,0xa000a,0x000b000b,0xa000a,0x000b000b,0xd000d,0x000d000d,0xd000d
   105 00000C71 000B000A000A000B00-
   105 00000C7A 0B000D000D000D000D-
   105 00000C83 000D000D00         
   106 00000C88 0D000D000D000D00        	dd	0x000d000d,0xd000d
   107                                  
   108                                  
   109                                  choose_table_H
   109          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   110 00000C90 101811181218131814-     	dw	0x1810, 0x1811, 0x1812, 0x1813, 0x1914, 0x1a14, 0x1b15, 0x1c15
   110 00000C99 19141A151B151C     
   111 00000CA0 161D161E171E171F17-     	dw	0x1d16, 0x1e16, 0x1e17, 0x1f17, 0x1f17
   111 00000CA9 1F                 
   112                                  
   113                                  choose_jump_table_L:
   114 00000CAA 60010000                	dd	table_MMX.L_case_0    - choose_table_MMX
   115 00000CAE 64010000                	dd	table_MMX.L_case_1    - choose_table_MMX
   116 00000CB2 35020000                	dd	table_MMX.L_case_2    - choose_table_MMX
   117 00000CB6 46020000                	dd	table_MMX.L_case_3    - choose_table_MMX
   118 00000CBA 91010000                	dd	table_MMX.L_case_45   - choose_table_MMX
   119 00000CBE 91010000                	dd	table_MMX.L_case_45   - choose_table_MMX
   120 00000CC2 9B010000                	dd	table_MMX.L_case_67   - choose_table_MMX
   121 00000CC6 9B010000                	dd	table_MMX.L_case_67   - choose_table_MMX
   122 00000CCA A5010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   123 00000CCE A5010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   124 00000CD2 A5010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   125 00000CD6 A5010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   126 00000CDA A5010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   127 00000CDE A5010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   128 00000CE2 A5010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   129 00000CE6 A5010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   130                                  
   131                                  	segment_code
   132                                  ;
   133                                  ; use MMX
   134                                  ;
   135                                  
   136                                  PIC_OFFSETTABLE
   136                              <1> extern _GLOBAL_OFFSET_TABLE_
   136                              <1> get_pc.bp:
   136 00000000 8B2C24              <1>  mov ebp, [esp]
   136 00000003 C3                  <1>  retn
   137                                  
   138 00000004 90<rept>                	align	16
   139                                  ; int choose_table(int *ix, int *end, int *s)
   140                                  choose_table_MMX:
   141 00000010 55                      	push	ebp
   142 00000011 E8EAFFFFFF              	call	get_pc.bp
   143 00000016 81C5[EAFFFFFF]          	add	ebp, PIC_BASE()
   144                                  
   145 0000001C 8B4C2408                	mov	ecx,[esp+8]	;ecx = begin
   146 00000020 8B54240C                	mov	edx,[esp+12]	;edx = end
   147 00000024 29D1                    	sub	ecx,edx		;ecx = begin-end(should be minus)
   148 00000026 F7C108000000            	test	ecx,8
   149 0000002C 0FEFC0                   	pxor	mm0,mm0		;mm0=[0:0]
   150 0000002F 0F6F0C0A                	movq	mm1,[edx+ecx]
   151 00000033 7407                    	jz	.lp
   152                                  
   153 00000035 83C108                  	add	ecx,8
   154 00000038 741C                    	jz	.exit
   155                                  
   156 0000003A 90<rept>                	align	4
   157                                  .lp:
   158 0000003C 0F6F240A                	movq	mm4,[edx+ecx]
   159 00000040 0F6F6C0A08              	movq	mm5,[edx+ecx+8]
   160 00000045 83C110                  	add	ecx,16
   161 00000048 0FD9E0                  	psubusw	mm4,mm0	; $BK\Ev$O(B dword $B$G$J$$$H$$$1$J$$$N$@$,(B
   162 0000004B 0FD9E9                  	psubusw	mm5,mm1	; $B$=$s$J%3%^%s%I$O$J$$(B :-p
   163 0000004E 0FFDC4                  	paddw	mm0,mm4 ; $B$,(B, $B$3$3$G07$&CM$NHO0O$O(B 8191+15 $B0J2<$J$N$GLdBj$J$$(B
   164 00000051 0FFDCD                  	paddw	mm1,mm5
   165 00000054 75E6                    	jnz	.lp
   166                                  .exit:
   167 00000056 0FD9C8                  	psubusw	mm1,mm0	; $B$3$l$bK\Ev$O(B dword $B$G$J$$$H$$$1$J$$(B
   168 00000059 0FFDC1                  	paddw	mm0,mm1
   169                                  
   170 0000005C 0F6FE0                  	movq	mm4,mm0
   171 0000005F 0F6AE4                  	punpckhdq	mm4,mm4
   172 00000062 0FD9E0                  	psubusw	mm4,mm0	; $B$3$l$bK\Ev$O(B dword $B$G$J$$$H$$$1$J$$(B
   173 00000065 0FFDC4                  	paddw	mm0,mm4
   174 00000068 0F7EC0                  	movd	eax,mm0
   175                                  
   176 0000006B 83F80F                  	cmp	eax,15
   177 0000006E 771C                    	ja	.with_ESC
   178 00000070 8D8D[10000000]          	lea	ecx,[PIC_EBP_REL(choose_table_MMX)]
   179 00000076 038C85[AA0C0000]        	add	ecx,[PIC_EBP_REL(choose_jump_table_L+eax*4)]
   180 0000007D FFE1                    	jmp 	ecx
   181                                  
   182                                  .with_ESC1:
   183 0000007F 0F77                    	emms
   184 00000081 8B4C2410                	mov	ecx, [esp+16]	; *s
   185 00000085 8901                    	mov	[ecx], eax
   186 00000087 83C8FF                  	or	eax,-1
   187 0000008A 5D                      	pop	ebp
   188 0000008B C3                      	ret
   189                                  
   190                                  .with_ESC:
   191 0000008C 3D0E200000              	cmp	eax, 8191+15
   192 00000091 77EC                    	ja	.with_ESC1
   193                                  
   194 00000093 83E80F                  	sub	eax,15
   195 00000096 53                      	push	ebx
   196 00000097 56                      	push	esi
   197 00000098 0FBDC0                  	bsr	eax, eax
   198                                  %assign _P 4*2
   199 0000009B 0F6FAD[08000000]        	movq    mm5, [PIC_EBP_REL(D15_15_15_15)]
   200 000000A2 0F6FB5[00000000]        	movq	mm6, [PIC_EBP_REL(D14_14_14_14)]
   201 000000A9 0F6F9D[10000000]        	movq	mm3, [PIC_EBP_REL(mul_add)]
   202                                  
   203 000000B0 8B4C2410                	mov	ecx, [esp+_P+8]		; = ix
   204                                  ;	mov	edx, [esp+_P+12]	; = end
   205 000000B4 29D1                    	sub	ecx, edx
   206                                  
   207 000000B6 31F6                    	xor	esi, esi	; sum = 0
   208 000000B8 F7C108000000            	test    ecx, 8
   209 000000BE 0FEFFF                  	pxor	mm7, mm7	; linbits_sum, 14$B$r1[$($?$b$N$N?t(B
   210 000000C1 7425                    	jz	.H_dual_lp1
   211                                  
   212 000000C3 0F6F040A                	movq	mm0, [edx+ecx]
   213 000000C7 83C108                  	add	ecx,8
   214 000000CA 0F6BC7                  	packssdw	mm0,mm7
   215 000000CD 0F6FD0                  	movq	mm2, mm0
   216 000000D0 0FDDC5                  	paddusw	mm0, mm5	; mm0 = min(ix, 15)+0xfff0
   217 000000D3 0F65D6                  	pcmpgtw	mm2, mm6	; 14$B$h$jBg$-$$$+!)(B
   218 000000D6 0FF9FA                  	psubw	mm7, mm2	; 14$B$h$jBg$-$$$H$-(B linbits_sum++;
   219 000000D9 0FF5C3                  	pmaddwd	mm0, mm3	; {0, 0, y, x}*{1, 16, 1, 16}
   220 000000DC 0F7EC3                  	movd	ebx, mm0
   221 000000DF 8BB49D[40040000]        	mov	esi, [PIC_EBP_REL(largetbl+ebx*4+(16*16+16)*4)]
   222                                  
   223 000000E6 7437                    	jz	.H_dual_exit
   224                                  
   225                                  	align   4
   226                                  .H_dual_lp1:
   227 000000E8 0F6F040A                	movq	mm0, [edx+ecx]
   228 000000EC 0F6F4C0A08              	movq	mm1, [edx+ecx+8]
   229 000000F1 0F6BC1                  	packssdw	mm0,mm1
   230 000000F4 0F6FD0                  	movq	mm2, mm0
   231 000000F7 0FDDC5                  	paddusw	mm0, mm5	; mm0 = min(ix, 15)+0xfff0
   232 000000FA 0F65D6                  	pcmpgtw	mm2, mm6	; 14$B$h$jBg$-$$$+!)(B
   233 000000FD 0FF5C3                  	pmaddwd	mm0, mm3	; {y, x, y, x}*{1, 16, 1, 16}
   234 00000100 0F7EC3                  	movd	ebx, mm0
   235 00000103 0F6AC0                  	punpckhdq	mm0,mm0
   236 00000106 03B49D[40040000]        	add	esi, [PIC_EBP_REL(largetbl+ebx*4+(16*16+16)*4)]
   237 0000010D 0F7EC3                  	movd	ebx, mm0
   238 00000110 03B49D[40040000]        	add	esi, [PIC_EBP_REL(largetbl+ebx*4+(16*16+16)*4)]
   239 00000117 83C110                  	add	ecx, 16
   240 0000011A 0FF9FA                  	psubw	mm7, mm2	; 14$B$h$jBg$-$$$H$-(B linbits_sum++;
   241 0000011D 75C9                    	jnz	.H_dual_lp1
   242                                  
   243                                  .H_dual_exit:
   244 0000011F 0F6FCF                  	pmov	mm1,mm7
   245 00000122 0F6AFF                  	punpckhdq	mm7,mm7
   246 00000125 0FFEF9                  	paddd	mm7,mm1
   247 00000128 0F62FF                  	punpckldq	mm7,mm7
   248                                  
   249 0000012B 0FF5BCC5[280C0000]      	pmaddwd	mm7, [PIC_EBP_REL(linbits32+eax*8)]	; linbits
   250 00000133 668B8445[900C0000]      	mov	ax, [PIC_EBP_REL(choose_table_H+eax*2)]
   251                                  
   252 0000013B 0F7EF9                  	movd	ecx, mm7
   253 0000013E 0F6AFF                  	punpckhdq	mm7,mm7
   254 00000141 0F7EFA                  	movd	edx,mm7
   255 00000144 0F77                    	emms
   256 00000146 C1E210                  	shl	edx, 16
   257 00000149 01D1                    	add	ecx, edx
   258                                  
   259 0000014B 01F1                    	add	ecx, esi
   260                                  
   261 0000014D 5E                      	pop	esi
   262 0000014E 5B                      	pop	ebx
   263                                  
   264 0000014F 89CA                    	mov	edx, ecx
   265 00000151 81E1FFFF0000            	and	ecx, 0xffff	; ecx = sum2
   266 00000157 C1EA10                  	shr	edx, 16	; edx = sum
   267                                  
   268 0000015A 39CA                    	cmp	edx, ecx
   269 0000015C 7E05                    	jle	.chooseE_s1
   270 0000015E 89CA                    	mov	edx, ecx
   271 00000160 C1E808                  	shr	eax, 8
   272                                  .chooseE_s1:
   273 00000163 8B4C2410                	mov	ecx, [esp+16] ; *s
   274 00000167 25FF000000              	and	eax, 0xff
   275 0000016C 0111                    	add	[ecx], edx
   276 0000016E 5D                      	pop	ebp
   277 0000016F C3                      	ret
   278                                  
   279                                  table_MMX.L_case_0:
   280 00000170 0F77                    	emms
   281 00000172 5D                      	pop	ebp
   282 00000173 C3                      	ret
   283                                  
   284                                  table_MMX.L_case_1:
   285 00000174 0F77                    	emms
   286 00000176 8B442410                	mov	eax, [esp+16] ; *s
   287 0000017A 8B4C2408                	mov	ecx, [esp+8] ; *ix
   288 0000017E 29D1                    	sub	ecx, edx
   289 00000180 53                      	push	ebx
   290                                  .lp:
   291 00000181 8B1C0A                  	mov	ebx, [edx+ecx]
   292 00000184 01DB                    	add	ebx, ebx
   293 00000186 035C0A04                	add	ebx, [edx+ecx+4]
   294 0000018A 0FB69C1D[00000000]      	movzx	ebx, byte [PIC_EBP_REL(ebx+t1l)]
   295 00000192 0118                    	add	[eax], ebx
   296 00000194 83C108                  	add	ecx, 8
   297 00000197 75E8                    	jnz	.lp
   298 00000199 5B                      	pop	ebx
   299 0000019A B801000000              	mov	eax, 1
   300 0000019F 5D                      	pop	ebp
   301 000001A0 C3                      	ret
   302                                  
   303                                  table_MMX.L_case_45:
   304 000001A1 6A07                    	push	dword 7
   305 000001A3 8D8D[70080000]          	lea	ecx, [PIC_EBP_REL(tableABC+9*8)]
   306 000001A9 EB12                    	jmp	from3
   307                                  
   308                                  table_MMX.L_case_67:
   309 000001AB 6A0A                    	push	dword 10
   310 000001AD 8D8D[28080000]          	lea	ecx, [PIC_EBP_REL(tableABC)]
   311 000001B3 EB08                    	jmp	from3
   312                                  
   313                                  table_MMX.L_case_8_15:
   314 000001B5 6A0D                    	push	dword 13
   315 000001B7 8D8D[28000000]          	lea	ecx, [PIC_EBP_REL(tableDEF)]
   316                                  from3:
   317 000001BD 8B44240C                	mov	eax,[esp+12]	;eax = *begin
   318                                  ;	mov	edx,[esp+16]	;edx = *end
   319                                  
   320 000001C1 53                      	push	ebx
   321 000001C2 29D0                    	sub	eax, edx
   322                                  
   323 000001C4 0F6FAD[10000000]        	movq	mm5,[PIC_EBP_REL(mul_add)]
   324 000001CB 0FEFD2                  	pxor	mm2,mm2	;mm2 = sum
   325                                  
   326 000001CE A908000000              	test	eax, 8
   327 000001D3 7417                    	jz	.choose3_lp1
   328                                  ; odd length
   329 000001D5 0F6F0402                	movq	mm0,[edx+eax]	;mm0 = ix[0] | ix[1]
   330 000001D9 83C008                  	add	eax,8
   331 000001DC 0F6BC2                  	packssdw	mm0,mm2
   332                                  
   333 000001DF 0FF5C5                  	pmaddwd	mm0,mm5
   334 000001E2 0F7EC3                  	movd	ebx,mm0
   335                                  
   336 000001E5 0F6F14D9                	movq	mm2,  [ecx+ebx*8]
   337                                  
   338 000001E9 7426                    	jz	.choose3_exit
   339                                  
   340 000001EB 90                      	align	4
   341                                  .choose3_lp1
   341          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   342 000001EC 0F6F0402                	movq	mm0,[edx+eax]
   343 000001F0 0F6F4C0208              	movq	mm1,[edx+eax+8]
   344 000001F5 83C010                  	add	eax,16
   345 000001F8 0F6BC1                  	packssdw	mm0,mm1 ;mm0 = ix[0]|ix[1]|ix[2]|ix[3]
   346 000001FB 0FF5C5                  	pmaddwd	mm0,mm5
   347 000001FE 0F7EC3                  	movd	ebx,mm0
   348 00000201 0F6AC0                  	punpckhdq	mm0,mm0
   349 00000204 0FFE14D9                	paddd	mm2, [ecx+ebx*8]
   350 00000208 0F7EC3                  	movd	ebx,mm0
   351 0000020B 0FFE14D9                	paddd	mm2, [ecx+ebx*8]
   352 0000020F 75DB                    	jnz	.choose3_lp1
   353                                  .choose3_exit
   353          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   354                                  ;	xor	eax,eax
   355 00000211 0F7ED3                  	movd	ebx, mm2
   356 00000214 0F6AD2                  	punpckhdq	mm2,mm2
   357 00000217 89D9                    	mov	ecx, ebx
   358 00000219 81E1FFFF0000            	and	ecx, 0xffff	; ecx = sum2
   359 0000021F C1EB10                  	shr	ebx, 16	; ebx = sum1
   360 00000222 0F7ED2                  	movd	edx, mm2	; edx = sum
   361                                  
   362 00000225 39DA                    	cmp	edx, ebx
   363 00000227 7E03                    	jle	.choose3_s1
   364 00000229 89DA                    	mov	edx, ebx
   365 0000022B 40                      	inc	eax
   366                                  .choose3_s1:
   367 0000022C 0F77                    	emms
   368 0000022E 5B                      	pop	ebx
   369 0000022F 39CA                    	cmp	edx, ecx
   370 00000231 7E07                    	jle	.choose3_s2
   371 00000233 89CA                    	mov	edx, ecx
   372 00000235 B802000000              	mov	eax, 2
   373                                  .choose3_s2:
   374 0000023A 59                      	pop	ecx
   375 0000023B 01C8                    	add	eax, ecx
   376 0000023D 8B4C2410                	mov	ecx, [esp+16] ; *s
   377 00000241 0111                    	add	[ecx], edx
   378 00000243 5D                      	pop	ebp
   379 00000244 C3                      	ret
   380                                  
   381                                  table_MMX.L_case_2:
   382 00000245 6A02                    	push	dword 2
   383 00000247 8D8D[00000000]          	lea	ecx,[PIC_EBP_REL(table23)]
   384 0000024D 0F6FAD[18000000]        	pmov	mm5,[PIC_EBP_REL(mul_add23)]
   385 00000254 EB0F                    	jmp	from2
   386                                  table_MMX.L_case_3:
   387 00000256 6A05                    	push	dword 5
   388 00000258 8D8D[00000000]          	lea	ecx,[PIC_EBP_REL(table56)]
   389 0000025E 0F6FAD[20000000]        	pmov	mm5,[PIC_EBP_REL(mul_add56)]
   390                                  from2:
   391 00000265 8B44240C                	mov	eax,[esp+12]	;eax = *begin
   392                                  ;	mov	edx,[esp+16]	;edx = *end
   393 00000269 53                      	push	ebx
   394 0000026A 57                      	push	edi
   395                                  
   396 0000026B 29D0                    	sub	eax, edx
   397 0000026D 31FF                    	xor	edi, edi
   398 0000026F A908000000              	test	eax, 8
   399 00000274 741A                    	jz	.choose2_lp1
   400                                  ; odd length
   401 00000276 0F6F0402                	movq	mm0,[edx+eax]	;mm0 = ix[0] | ix[1]
   402 0000027A 0FEFD2                  	pxor	mm2,mm2		;mm2 = sum
   403 0000027D 0F6BC2                  	packssdw	mm0,mm2
   404                                  
   405 00000280 0FF5C5                  	pmaddwd	mm0,mm5
   406 00000283 0F7EC3                  	movd	ebx,mm0
   407                                  
   408 00000286 8B3C99                  	mov	edi,  [ecx+ebx*4]
   409                                  
   410 00000289 83C008                  	add	eax,8
   411 0000028C 7425                    	jz	.choose2_exit
   412                                  
   413 0000028E 90<rept>                	align	4
   414                                  .choose2_lp1
   414          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   415 00000290 0F6F0402                	movq	mm0,[edx+eax]
   416 00000294 0F6F4C0208              	movq	mm1,[edx+eax+8]
   417 00000299 0F6BC1                  	packssdw	mm0,mm1 ;mm0 = ix[0]|ix[1]|ix[2]|ix[3]
   418 0000029C 0FF5C5                  	pmaddwd	mm0,mm5
   419 0000029F 0F7EC3                  	movd	ebx,mm0
   420 000002A2 0F6AC0                  	punpckhdq	mm0,mm0
   421 000002A5 033C99                  	add	edi, [ecx+ebx*4]
   422 000002A8 0F7EC3                  	movd	ebx, mm0
   423 000002AB 033C99                  	add	edi, [ecx+ebx*4]
   424 000002AE 83C010                  	add	eax,16
   425 000002B1 73DD                    	jnc	.choose2_lp1
   426                                  .choose2_exit
   426          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   427 000002B3 89F9                    	mov	ecx, edi
   428 000002B5 5F                      	pop	edi
   429 000002B6 5B                      	pop	ebx
   430 000002B7 58                      	pop	eax ; table num.
   431 000002B8 0F77                    	emms
   432                                  
   433 000002BA 89CA                    	mov	edx, ecx
   434 000002BC 81E1FFFF0000            	and	ecx, 0xffff	; ecx = sum2
   435 000002C2 C1EA10                  	shr	edx, 16	; edx = sum1
   436                                  
   437 000002C5 39CA                    	cmp	edx, ecx
   438 000002C7 7E03                    	jle	.choose2_s1
   439 000002C9 89CA                    	mov	edx, ecx
   440 000002CB 40                      	inc	eax
   441                                  .choose2_s1:
   442 000002CC 8B4C2410                	mov	ecx, [esp+16] ; *s
   443 000002D0 0111                    	add	[ecx], edx
   444 000002D2 5D                      	pop	ebp
   445 000002D3 C3                      	ret
   446                                  
   447                                  	end
   447          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
