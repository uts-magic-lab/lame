     1                                  ;
     2                                  ;
     3                                  ; 	assembler routines to detect CPU-features
     4                                  ;
     5                                  ;	MMX / 3DNow! / SSE / SSE2
     6                                  ;
     7                                  ;	for the LAME project
     8                                  ;	Frank Klemm, Robert Hegemann 2000-10-12
     9                                  ;
    10                                  
    11                                  %include "nasm.h"
     1                              <1> 
     2                              <1> ;	Copyright (C) 1999 URURI
     3                              <1> 
     4                              <1> ;	nasm�ѥޥ���
     5                              <1> ;	1999/08/21 ���
     6                              <1> ;	1999/10/10 ���Ĥ��ɲ�
     7                              <1> ;	1999/10/27 aout�б�
     8                              <1> ;	1999/11/07 pushf, popf ��NASM�ΥХ��б�
     9                              <1> ;	1999/12/02 for BCC ( Thanks to Miquel )
    10                              <1> 
    11                              <1> ; for Windows Visual C++        -> define WIN32
    12                              <1> ;             Borland or cygwin ->        WIN32 and COFF
    13                              <1> ; for FreeBSD 2.x               ->        AOUT
    14                              <1> ; for TownsOS                   ->        __tos__
    15                              <1> ; otherwise                     ->   none
    16                              <1> 
    17                              <1> ;̾����դ���
    18                              <1> 
    19                              <1> BITS 32
    20                              <1> 
    21                              <1> section .note.GNU-stack noalloc noexec nowrite progbits
    22                              <1> 
    23                              <1> %ifdef YASM
    24                              <1> 	%define segment_code segment .text align=16 use32
    25                              <1> 	%define segment_data segment .data align=16 use32
    26                              <1> 	%define segment_bss  segment .bss align=16 use32
    27                              <1> %elifdef WIN32
    28                              <1> 	%define segment_code segment .text align=16 class=CODE use32
    29                              <1> 	%define segment_data segment .data align=16 class=DATA use32
    30                              <1> %ifdef __BORLANDC__
    31                              <1> 	%define segment_bss  segment .data align=16 class=DATA use32
    32                              <1> %else
    33                              <1> 	%define segment_bss  segment .bss align=16 class=DATA use32
    34                              <1> %endif
    35                              <1> %elifdef AOUT
    36                              <1> 	%define _NAMING
    37                              <1> 	%define segment_code segment .text
    38                              <1> 	%define segment_data segment .data
    39                              <1> 	%define segment_bss  segment .bss
    40                              <1> %else
    41                              <1> %ifidn __OUTPUT_FORMAT__,elf
    42                              <1> 	section .note.GNU-stack progbits noalloc noexec nowrite align=1
    43                              <1> %endif
    44                              <1> 	%define segment_code segment .text align=16 class=CODE use32
    45                              <1> 	%define segment_data segment .data align=16 class=DATA use32
    46                              <1> 	%define segment_bss  segment .bss align=16 class=DATA use32
    47                              <1> %endif
    48                              <1> 
    49                              <1> %ifdef WIN32
    50                              <1> 	%define _NAMING
    51                              <1> %endif
    52                              <1> 
    53                              <1> %ifdef __tos__
    54                              <1> group CGROUP text
    55                              <1> group DGROUP data
    56                              <1> %endif
    57                              <1> 
    58                              <1> ;ñ�����ư��������
    59                              <1> 
    60                              <1> %idefine float dword
    61                              <1> %idefine fsize 4
    62                              <1> %idefine fsizen(a) (fsize*(a))
    63                              <1> 
    64                              <1> ;��ɷ��
    65                              <1> 
    66                              <1> %idefine wsize 2
    67                              <1> %idefine wsizen(a) (wsize*(a))
    68                              <1> %idefine dwsize 4
    69                              <1> %idefine dwsizen(a) (dwsize*(a))
    70                              <1> 
    71                              <1> ;REG
    72                              <1> 
    73                              <1> %define r0 eax
    74                              <1> %define r1 ebx
    75                              <1> %define r2 ecx
    76                              <1> %define r3 edx
    77                              <1> %define r4 esi
    78                              <1> %define r5 edi
    79                              <1> %define r6 ebp
    80                              <1> %define r7 esp
    81                              <1> 
    82                              <1> ;MMX,3DNow!,SSE
    83                              <1> 
    84                              <1> %define pmov	movq
    85                              <1> %define pmovd	movd
    86                              <1> 
    87                              <1> %define pupldq	punpckldq
    88                              <1> %define puphdq	punpckhdq
    89                              <1> %define puplwd	punpcklwd
    90                              <1> %define puphwd	punpckhwd
    91                              <1> 
    92                              <1> %define xm0 xmm0
    93                              <1> %define xm1 xmm1
    94                              <1> %define xm2 xmm2
    95                              <1> %define xm3 xmm3
    96                              <1> %define xm4 xmm4
    97                              <1> %define xm5 xmm5
    98                              <1> %define xm6 xmm6
    99                              <1> %define xm7 xmm7
   100                              <1> 
   101                              <1> ;�����åե��Ѥ�4�ʥޥ���
   102                              <1> 
   103                              <1> %define R4(a,b,c,d) (a*64+b*16+c*4+d)
   104                              <1> 
   105                              <1> ;C�饤���ʴʰץޥ���
   106                              <1> 
   107                              <1> %imacro globaldef 1
   108                              <1> 	%ifdef _NAMING
   109                              <1> 		%define %1 _%1
   110                              <1> 	%endif
   111                              <1> 	global %1
   112                              <1> %endmacro
   113                              <1> 
   114                              <1> %imacro externdef 1
   115                              <1> 	%ifdef _NAMING
   116                              <1> 		%define %1 _%1
   117                              <1> 	%endif
   118                              <1> 	extern %1
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> %imacro proc 1
   122                              <1> 	%push	proc
   123                              <1> 	%ifdef _NAMING
   124                              <1> 		global _%1
   125                              <1> 	%else
   126                              <1> 		global %1
   127                              <1> 	%endif
   128                              <1> 
   129                              <1> 	align 32
   130                              <1> %1:
   131                              <1> _%1:
   132                              <1> 
   133                              <1> 	%assign %$STACK 0
   134                              <1> 	%assign %$STACKN 0
   135                              <1> 	%assign %$ARG 4
   136                              <1> %endmacro
   137                              <1> 
   138                              <1> %imacro endproc 0
   139                              <1> 	%ifnctx proc
   140                              <1> 		%error expected 'proc' before 'endproc'.
   141                              <1> 	%else
   142                              <1> 		%if %$STACK > 0
   143                              <1> 			add esp, %$STACK
   144                              <1> 		%endif
   145                              <1> 
   146                              <1> 		%if %$STACK <> (-%$STACKN)
   147                              <1> 			%error STACKLEVEL mismatch check 'local', 'alloc', 'pushd', 'popd'
   148                              <1> 		%endif
   149                              <1> 
   150                              <1> 		ret
   151                              <1> 		%pop
   152                              <1> 	%endif
   153                              <1> %endmacro
   154                              <1> 
   155                              <1> %idefine sp(a) esp+%$STACK+a
   156                              <1> 
   157                              <1> %imacro arg 1
   158                              <1> 	%00	equ %$ARG
   159                              <1> 	%assign %$ARG %$ARG+%1
   160                              <1> %endmacro
   161                              <1> 
   162                              <1> %imacro local 1
   163                              <1> 	%assign %$STACKN %$STACKN-%1
   164                              <1> 	%00 equ %$STACKN
   165                              <1> %endmacro
   166                              <1> 
   167                              <1> %imacro alloc 0
   168                              <1> 	sub esp, (-%$STACKN)-%$STACK
   169                              <1> 	%assign %$STACK (-%$STACKN)
   170                              <1> %endmacro
   171                              <1> 
   172                              <1> %imacro pushd 1-*
   173                              <1> 	%rep %0
   174                              <1> 		push %1
   175                              <1> 		%assign %$STACK %$STACK+4
   176                              <1> 	%rotate 1
   177                              <1> 	%endrep
   178                              <1> %endmacro
   179                              <1> 
   180                              <1> %imacro popd 1-*
   181                              <1> 	%rep %0
   182                              <1> 	%rotate -1
   183                              <1> 		pop %1
   184                              <1> 		%assign %$STACK %$STACK-4
   185                              <1> 	%endrep
   186                              <1> %endmacro
   187                              <1> 
   188                              <1> ; bug of NASM-0.98
   189                              <1> %define pushf db 0x66, 0x9C
   190                              <1> %define popf  db 0x66, 0x9D
   191                              <1> 
   192                              <1> %define	ge16(n)		((((n) / 16)*0xFFFFFFFF) & 0xFFFFFFFF)
   193                              <1> %define	ge15(n)		((((n) / 15)*0xFFFFFFFF) & 0xFFFFFFFF)
   194                              <1> %define	ge14(n)		((((n) / 14)*0xFFFFFFFF) & 0xFFFFFFFF)
   195                              <1> %define	ge13(n)		((((n) / 13)*0xFFFFFFFF) & 0xFFFFFFFF)
   196                              <1> %define	ge12(n)		((((n) / 12)*0xFFFFFFFF) & 0xFFFFFFFF)
   197                              <1> %define	ge11(n)		((((n) / 11)*0xFFFFFFFF) & 0xFFFFFFFF)
   198                              <1> %define	ge10(n)		((((n) / 10)*0xFFFFFFFF) & 0xFFFFFFFF)
   199                              <1> %define	ge9(n)		((((n) /  9)*0xFFFFFFFF) & 0xFFFFFFFF)
   200                              <1> %define	ge8(n)		(ge9(n) | ((((n) /  8)*0xFFFFFFFF) & 0xFFFFFFFF))
   201                              <1> %define	ge7(n)		(ge9(n) | ((((n) /  7)*0xFFFFFFFF) & 0xFFFFFFFF))
   202                              <1> %define	ge6(n)		(ge9(n) | ((((n) /  6)*0xFFFFFFFF) & 0xFFFFFFFF))
   203                              <1> %define	ge5(n)		(ge9(n) | ((((n) /  5)*0xFFFFFFFF) & 0xFFFFFFFF))
   204                              <1> %define	ge4(n)		(ge5(n) | ((((n) /  4)*0xFFFFFFFF) & 0xFFFFFFFF))
   205                              <1> %define	ge3(n)		(ge5(n) | ((((n) /  3)*0xFFFFFFFF) & 0xFFFFFFFF))
   206                              <1> %define	ge2(n)		(ge3(n) | ((((n) /  2)*0xFFFFFFFF) & 0xFFFFFFFF))
   207                              <1> %define	ge1(n)		(ge2(n) | ((((n) /  1)*0xFFFFFFFF) & 0xFFFFFFFF))
   208                              <1> 
   209                              <1> ; macro to align for begining of loop
   210                              <1> ; %1   does not align if it LE bytes to next alignment 
   211                              <1> ;      4..16 
   212                              <1> ;      default is 12
   213                              <1> 
   214                              <1> %imacro	loopalignK6	0-1 12 
   215                              <1> %%here:
   216                              <1> 	times (($$-%%here) & 15 & ge1(($$-%%here) & 15) & ~ge4(($$-%%here) & 15)) nop
   217                              <1> 	times (1                & ge4(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) jmp short %%skip
   218                              <1> 	times (((($$-%%here) & 15)-2) & ge4(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) nop
   219                              <1> %%skip:
   220                              <1> %endmacro
   221                              <1> 
   222                              <1> %imacro	loopalignK7	0-1 12 
   223                              <1> %%here:
   224                              <1> 	times (1 & ge1(($$-%%here) & 15)  & ~ge2(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) nop
   225                              <1> 	times (1 & ge2(($$-%%here) & 15)  & ~ge3(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Bh,0C0h
   226                              <1> 	times (1 & ge3(($$-%%here) & 15)  & ~ge4(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,020h
   227                              <1> 	times (1 & ge4(($$-%%here) & 15)  & ~ge5(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h
   228                              <1> 	times (1 & ge5(($$-%%here) & 15)  & ~ge6(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h,090h
   229                              <1> 	times (1 & ge6(($$-%%here) & 15)  & ~ge7(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,080h,0,0,0,0
   230                              <1> 	times (1 & ge7(($$-%%here) & 15)  & ~ge8(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0
   231                              <1> 	times (1 & ge8(($$-%%here) & 15)  & ~ge9(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0,90h
   232                              <1> 	times (1 & ge9(($$-%%here) & 15)  & ~ge10(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,007h,90h,90h,90h,90h,90h,90h,90h
   233                              <1> 	times (1 & ge10(($$-%%here) & 15) & ~ge11(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,008h,90h,90h,90h,90h,90h,90h,90h,90h
   234                              <1> 	times (1 & ge11(($$-%%here) & 15) & ~ge12(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,009h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   235                              <1> 	times (1 & ge12(($$-%%here) & 15) & ~ge13(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ah,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   236                              <1> 	times (1 & ge13(($$-%%here) & 15) & ~ge14(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Bh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   237                              <1> 	times (1 & ge14(($$-%%here) & 15) & ~ge15(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ch,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   238                              <1> 	times (1 & ge15(($$-%%here) & 15) & ~ge16(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Dh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   239                              <1> %%skip:
   240                              <1> %endmacro
   241                              <1> 
   242                              <1> %imacro	loopalign	0-1 12 
   243                              <1> 	loopalignK7 %1
   244                              <1> %endmacro
   245                              <1> %define PACK(x,y,z,w)	(x*64+y*16+z*4+w)
   246                              <1> 
   247                              <1> %ifidn __OUTPUT_FORMAT__,elf
   248                              <1> 
   249                              <1> %idefine PIC_BASE(A) _GLOBAL_OFFSET_TABLE_ + $$ - $ wrt ..gotpc
   250                              <1> %idefine PIC_EBP_REL(A) ebp + A wrt ..gotoff
   251                              <1> %macro PIC_OFFSETTABLE 0
   252                              <1> extern  _GLOBAL_OFFSET_TABLE_
   253                              <1> get_pc.bp:
   254                              <1> 	mov ebp, [esp]
   255                              <1> 	retn
   256                              <1> %endmacro
   257                              <1> 
   258                              <1> %else
   259                              <1> 
   260                              <1> %define PIC_BASE(A) (0)
   261                              <1> %define PIC_EBP_REL(A) (A)
   262                              <1> %macro PIC_OFFSETTABLE 0
   263                              <1> get_pc.bp:
   264                              <1> 	mov ebp, [esp]
   265                              <1> 	retn
   266                              <1> %endmacro
   267                              <1> 
   268                              <1> %endif
    12                                  
    13                                  	globaldef	has_MMX_nasm
    13                              <1>  %ifdef _NAMING
    13                              <1>  %define %1 _%1
    13                              <1>  %endif
    13                              <1>  global %1
    14                                  	globaldef	has_3DNow_nasm
    14                              <1>  %ifdef _NAMING
    14                              <1>  %define %1 _%1
    14                              <1>  %endif
    14                              <1>  global %1
    15                                  	globaldef	has_SSE_nasm
    15                              <1>  %ifdef _NAMING
    15                              <1>  %define %1 _%1
    15                              <1>  %endif
    15                              <1>  global %1
    16                                  	globaldef	has_SSE2_nasm
    16                              <1>  %ifdef _NAMING
    16                              <1>  %define %1 _%1
    16                              <1>  %endif
    16                              <1>  global %1
    17                                  
    18                                          segment_code
    19                                  
    20                                  testCPUID:
    21 00000000 9C                      	pushfd	                        
    22 00000001 58                      	pop	eax
    23 00000002 89C1                    	mov	ecx,eax
    24 00000004 3500002000              	xor	eax,0x200000
    25 00000009 50                      	push	eax
    26 0000000A 9D                      	popfd
    27 0000000B 9C                      	pushfd
    28 0000000C 58                      	pop	eax
    29 0000000D 39C8                    	cmp	eax,ecx
    30 0000000F C3                      	ret
    31                                  
    32                                  ;---------------------------------------
    33                                  ;	int  has_MMX_nasm (void)
    34                                  ;---------------------------------------
    35                                  
    36                                  has_MMX_nasm:
    37 00000010 60                              pushad
    38 00000011 E8EAFFFFFF              	call	testCPUID
    39 00000016 746D                    	jz	return0		; no CPUID command, so no MMX
    40                                  
    41 00000018 B801000000              	mov	eax,0x1
    42 0000001D 0FA2                    	CPUID
    43 0000001F F7C200008000            	test	edx,0x800000
    44 00000025 745E                    	jz	return0		; no MMX support
    45 00000027 EB57                    	jmp	return1		; MMX support
    46                                          
    47                                  ;---------------------------------------
    48                                  ;	int  has_SSE_nasm (void)
    49                                  ;---------------------------------------
    50                                  
    51                                  has_SSE_nasm:
    52 00000029 60                              pushad
    53 0000002A E8D1FFFFFF              	call	testCPUID
    54 0000002F 7454                    	jz	return0		; no CPUID command, so no SSE
    55                                          
    56 00000031 B801000000              	mov	eax,0x1
    57 00000036 0FA2                    	CPUID
    58 00000038 F7C200000002            	test	edx,0x02000000
    59 0000003E 7445                    	jz	return0		; no SSE support
    60 00000040 EB3E                    	jmp	return1		; SSE support
    61                                          
    62                                  ;---------------------------------------
    63                                  ;	int  has_SSE2_nasm (void)
    64                                  ;---------------------------------------
    65                                  
    66                                  has_SSE2_nasm:
    67 00000042 60                              pushad
    68 00000043 E8B8FFFFFF              	call	testCPUID
    69 00000048 743B                    	jz	return0		; no CPUID command, so no SSE2
    70                                          
    71 0000004A B801000000              	mov	eax,0x1
    72 0000004F 0FA2                    	CPUID
    73 00000051 F7C200000004            	test	edx,0x04000000
    74 00000057 742C                    	jz	return0		; no SSE2 support
    75 00000059 EB25                    	jmp	return1		; SSE2 support
    76                                          
    77                                  ;---------------------------------------
    78                                  ;	int  has_3DNow_nasm (void)
    79                                  ;---------------------------------------
    80                                  
    81                                  has_3DNow_nasm:
    82 0000005B 60                              pushad
    83 0000005C E89FFFFFFF              	call	testCPUID
    84 00000061 7422                    	jz	return0		; no CPUID command, so no 3DNow!
    85                                  
    86 00000063 B800000080              	mov	eax,0x80000000
    87 00000068 0FA2                    	CPUID
    88 0000006A 3D00000080              	cmp	eax,0x80000000
    89 0000006F 7614                    	jbe	return0		; no extended MSR(1), so no 3DNow!
    90                                  
    91 00000071 B801000080              	mov	eax,0x80000001
    92 00000076 0FA2                    	CPUID
    93 00000078 F7C200000080            	test	edx,0x80000000
    94 0000007E 7405                    	jz	return0		; no 3DNow! support
    95                                  				; 3DNow! support
    96                                  return1:
    97 00000080 61                      	popad
    98 00000081 31C0                    	xor	eax,eax
    99 00000083 40                      	inc	eax
   100 00000084 C3                      	ret
   101                                  
   102                                  return0:
   103 00000085 61                      	popad
   104 00000086 31C0                    	xor	eax,eax
   105 00000088 C3                      	ret
   106                                          
   107                                          end
   107          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
